CREATE TABLE T_IDENTITY_TYPE
(
  IDENTITY_TYPE_KEY   INTEGER PRIMARY key AUTOINCREMENT NOT NULL,
  IDENTITY_TYPE_NAME  VARCHAR2(64)         NOT NULL,
  DESCRIPTION         VARCHAR2(128),
  LAST_MODIFIED       DATETIME                      DEFAULT current_timestamp               NOT NULL,
  OPERATOR_MODIFIED   INTEGER
);

CREATE TABLE T_IDENTITY
(
  IDENTITY_KEY         INTEGER   PRIMARY key AUTOINCREMENT,
  IDENTITY_NAME        VARCHAR(64)             NOT NULL,
  IDENTITY_TYPE_KEY    INTEGER                  NOT NULL,
  DESCRIPTION          VARCHAR(128)                NULL,
  SALT                 INTEGER                      NULL,
  ENABLED              CHAR(1)                  DEFAULT '1'                   NOT NULL,
  LOGIN_ENABLED        CHAR(1)                  DEFAULT  '1'                   NOT NULL,
  PWD                  VARCHAR(128)                NULL,
  START_DATE           datetime    default current_timestamp            NOT NULL,
  END_DATE             datetime                    DEFAULT '9999-01-01 00:00:00' NOT NULL,
  LAST_MODIFIED        datetime             DEFAULT current_timestamp   NOT NULL,
  OPERATOR_MODIFIED    INTEGER                      NULL,
  FIRST_NAME           VARCHAR(128)                NULL,
  LAST_NAME            VARCHAR(128)                NULL,
  EMAIL                VARCHAR(64)                 NULL,
  EMAIL2               VARCHAR(64)                 NULL,
  PWD_MUST_BE_CHANGED  INTEGER                  DEFAULT 1                     NOT NULL,
  PHONE                VARCHAR(64)                 NULL,
  EXTERNAL_KEY         INTEGER                      NULL,
  EXTERNAL_ID          VARCHAR(64)                 NULL,
  PREFERENCES          CLOB,
  FOREIGN KEY(IDENTITY_TYPE_KEY) REFERENCES T_IDENTITY_TYPE(IDENTITY_TYPE_KEY)
);

CREATE TABLE T_IDENTITY_TO_IDENTITY
(
  PARENT_IDENTITY_KEY  INTEGER                  NOT NULL,
  IDENTITY_KEY         INTEGER                  NOT NULL,
  LAST_MODIFIED        DATE                     DEFAULT current_timestamp               NOT NULL,
  OPERATOR_MODIFIED    INTEGER,
  FOREIGN KEY(PARENT_IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY),
  FOREIGN KEY(IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY)
);

---------------

CREATE TABLE T_RIGHT
(
  RIGHT_KEY          INTEGER PRIMARY key AUTOINCREMENT NOT NULL,
  RIGHT_NAME         VARCHAR2(64)          NOT NULL,
  DESCRIPTION        VARCHAR2(128),
  LAST_MODIFIED      DATE                       DEFAULT current_timestamp               NOT NULL,
  OPERATOR_MODIFIED  INTEGER
);

CREATE TABLE T_IDENTITY_TO_RIGHT
(
  IDENTITY_KEY       INTEGER                    NOT NULL,
  RIGHT_KEY          INTEGER                    NOT NULL,
  LAST_MODIFIED      DATE                       DEFAULT current_timestamp               NOT NULL,
  RIGHT_VALUE        VARCHAR2(512)         DEFAULT 'true' NOT NULL,
  RIGHT_CONTEXT      VARCHAR2(128)         DEFAULT '*'                   NOT NULL,
  OPERATOR_MODIFIED  INTEGER,
  FOREIGN KEY(IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY),
  FOREIGN KEY(RIGHT_KEY) REFERENCES T_RIGHT(RIGHT_KEY)
);

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_NAME
ON T_IDENTITY
(IDENTITY_NAME)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_RIGHT_NAME
ON T_RIGHT
(RIGHT_NAME)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_TO_IDENTITY
ON T_IDENTITY_TO_IDENTITY
(PARENT_IDENTITY_KEY, IDENTITY_KEY)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_TO_RIGHT
ON T_IDENTITY_TO_RIGHT
(IDENTITY_KEY, RIGHT_KEY)
;

----------------
-- CREATE TRIGGER IF NOT EXISTS TR_U_T_IDENTITY_LM
CREATE TRIGGER TR_U_T_IDENTITY_LM
AFTER UPDATE ON T_IDENTITY FOR EACH ROW
BEGIN
  update T_IDENTITY set LAST_MODIFIED  = current_timestamp where rowid=new.rowid ;
END;

------------

-- CREATE TRIGGER IF NOT EXISTS TR_U_T_IDENTITY_TO_IDENTITY_LM
CREATE TRIGGER TR_U_T_IDENTITY_TO_IDENTITY_LM
AFTER UPDATE ON T_IDENTITY_TO_IDENTITY FOR EACH ROW
BEGIN
  update T_IDENTITY_TO_IDENTITY set LAST_MODIFIED  = current_timestamp where rowid=new.rowid ;
END;

------------

-- CREATE TRIGGER IF NOT EXISTS TR_U_T_IDENTITY_TO_RIGHT_LM
CREATE TRIGGER TR_U_T_IDENTITY_TO_RIGHT_LM
AFTER UPDATE ON T_IDENTITY_TO_RIGHT FOR EACH ROW
BEGIN
  update T_IDENTITY_TO_RIGHT set LAST_MODIFIED  = current_timestamp where rowid=new.rowid ;
END;

------------

-- CREATE TRIGGER IF NOT EXISTS TR_U_T_IDENTITY_TYPE_LM
CREATE TRIGGER TR_U_T_IDENTITY_TYPE_LM
AFTER UPDATE ON T_IDENTITY_TYPE FOR EACH ROW
BEGIN
  update T_IDENTITY_TYPE set LAST_MODIFIED  = current_timestamp where rowid=new.rowid ;
END;

------------

-- CREATE TRIGGER IF NOT EXISTS TR_U_T_RIGHT_LM
CREATE TRIGGER TR_U_T_RIGHT_LM
AFTER UPDATE ON T_RIGHT FOR EACH ROW
BEGIN
  update T_RIGHT set LAST_MODIFIED  = current_timestamp where rowid=new.rowid ;
END;
