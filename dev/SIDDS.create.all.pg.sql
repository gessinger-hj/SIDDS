CREATE TABLE T_IDENTITY_TYPE
(
  IDENTITY_TYPE_KEY   SERIAL,
  IDENTITY_TYPE_NAME  VARCHAR(64)         NOT NULL,
  DESCRIPTION         VARCHAR(128),
  LAST_MODIFIED       timestamp                      DEFAULT date_trunc('second', CURRENT_TIMESTAMP )               NOT NULL,
  OPERATOR_MODIFIED   INTEGER,
  PRIMARY KEY ( IDENTITY_TYPE_KEY )
);

  --START_DATE           timestamp    default current_timestamp            NOT NULL,
CREATE TABLE T_IDENTITY
(
  IDENTITY_KEY         SERIAL,
  IDENTITY_NAME        VARCHAR(64)             NOT NULL,
  IDENTITY_TYPE_KEY    INTEGER                  NOT NULL,
  DESCRIPTION          VARCHAR(128)                NULL,
  SALT                 INTEGER                      NULL,
  ENABLED              CHAR(1)                  DEFAULT '1'                   NOT NULL,
  LOGIN_ENABLED        CHAR(1)                  DEFAULT  '1'                   NOT NULL,
  PWD                  VARCHAR(128)                NULL,
  START_DATE           timestamp    DEFAULT current_timestamp NOT NULL,
  END_DATE             timestamp                    DEFAULT '9999-01-01 00:00:00' NOT NULL,
  LAST_MODIFIED        timestamp             DEFAULT date_trunc('second', CURRENT_TIMESTAMP )   NOT NULL,
  OPERATOR_MODIFIED    INTEGER                      NULL,
  FIRST_NAME           VARCHAR(128)                NULL,
  LAST_NAME            VARCHAR(128)                NULL,
  EMAIL                VARCHAR(64)                 NULL,
  EMAIL2               VARCHAR(64)                 NULL,
  PWD_MUST_BE_CHANGED  INTEGER                  DEFAULT 1                     NOT NULL,
  PHONE                VARCHAR(64)                 NULL,
  EXTERNAL_KEY         INTEGER                      NULL,
  EXTERNAL_ID          VARCHAR(64)                 NULL,
  PREFERENCES          TEXT,
  PRIMARY KEY ( IDENTITY_KEY ),
  FOREIGN KEY (IDENTITY_TYPE_KEY) 
        REFERENCES T_IDENTITY_TYPE(IDENTITY_TYPE_KEY)
        ON DELETE CASCADE
);

CREATE TABLE T_IDENTITY_TO_IDENTITY
(
  PARENT_IDENTITY_KEY  INTEGER                  NOT NULL,
  IDENTITY_KEY         INTEGER                  NOT NULL,
  LAST_MODIFIED        timestamp                 DEFAULT date_trunc('second', CURRENT_TIMESTAMP )               NOT NULL,
  OPERATOR_MODIFIED    INTEGER,
  FOREIGN KEY(PARENT_IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY) ON DELETE CASCADE,
  FOREIGN KEY(IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY) ON DELETE CASCADE
);

---------------

CREATE TABLE T_RIGHT
(
  RIGHT_KEY          SERIAL,
  RIGHT_NAME         VARCHAR(64)          NOT NULL,
  DESCRIPTION        VARCHAR(128),
  LAST_MODIFIED      timestamp                       DEFAULT date_trunc('second', CURRENT_TIMESTAMP )               NOT NULL,
  OPERATOR_MODIFIED  INTEGER,
  PRIMARY KEY ( RIGHT_KEY )
);

CREATE TABLE T_IDENTITY_TO_RIGHT
(
  IDENTITY_KEY       INTEGER                    NOT NULL,
  RIGHT_KEY          INTEGER                    NOT NULL,
  LAST_MODIFIED      timestamp                       DEFAULT date_trunc('second', CURRENT_TIMESTAMP )               NOT NULL,
  RIGHT_VALUE        VARCHAR(512)         DEFAULT 'true' NOT NULL,
  RIGHT_CONTEXT      VARCHAR(128)         DEFAULT '*'                   NOT NULL,
  OPERATOR_MODIFIED  INTEGER,
  FOREIGN KEY(IDENTITY_KEY) REFERENCES T_IDENTITY(IDENTITY_KEY) ON DELETE CASCADE,
  FOREIGN KEY(RIGHT_KEY) REFERENCES T_RIGHT(RIGHT_KEY) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_NAME
ON T_IDENTITY
(IDENTITY_NAME)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_RIGHT_NAME
ON T_RIGHT
(RIGHT_NAME)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_TO_IDENTITY
ON T_IDENTITY_TO_IDENTITY
(PARENT_IDENTITY_KEY, IDENTITY_KEY)
;

CREATE UNIQUE INDEX IF NOT EXISTS I_T_IDENTITY_TO_RIGHT
ON T_IDENTITY_TO_RIGHT
(IDENTITY_KEY, RIGHT_KEY)
;

CREATE OR REPLACE FUNCTION f_last_modified()
  RETURNS trigger AS
$BODY$
BEGIN
  NEW.LAST_MODIFIED:=date_trunc('second', CURRENT_TIMESTAMP ) ;
  RETURN NEW ;
END;$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;

DROP TRIGGER IF EXISTS TR_T_IDENTITY_LM ON T_IDENTITY CASCADE ;
CREATE TRIGGER TR_T_IDENTITY_LM BEFORE INSERT OR UPDATE ON T_IDENTITY FOR EACH ROW EXECUTE PROCEDURE F_LAST_MODIFIED() ;

DROP TRIGGER IF EXISTS TR_T_IDENTITY_TO_IDENTITY_LM ON T_IDENTITY_TO_IDENTITY CASCADE ;
CREATE TRIGGER TR_T_IDENTITY_TO_IDENTITY_LM BEFORE INSERT OR UPDATE ON T_IDENTITY_TO_IDENTITY FOR EACH ROW EXECUTE PROCEDURE F_LAST_MODIFIED() ;

DROP TRIGGER IF EXISTS TR_T_IDENTITY_TO_RIGHT_LM ON T_IDENTITY_TO_RIGHT CASCADE ;
CREATE TRIGGER TR_T_IDENTITY_TO_RIGHT_LM BEFORE INSERT OR UPDATE ON T_IDENTITY_TO_RIGHT FOR EACH ROW EXECUTE PROCEDURE F_LAST_MODIFIED() ;

DROP TRIGGER IF EXISTS TR_T_IDENTITY_TYPE_LM ON T_IDENTITY_TYPE CASCADE ;
CREATE TRIGGER TR_T_IDENTITY_TYPE_LM BEFORE INSERT OR UPDATE ON T_IDENTITY_TYPE FOR EACH ROW EXECUTE PROCEDURE F_LAST_MODIFIED() ;

DROP TRIGGER IF EXISTS TR_T_RIGHT_LM ON T_RIGHT CASCADE ;
CREATE TRIGGER TR_T_RIGHT_LM BEFORE INSERT OR UPDATE ON T_RIGHT FOR EACH ROW EXECUTE PROCEDURE F_LAST_MODIFIED() ;

CREATE OR REPLACE VIEW V_IDENTITY_TO_IDENTITY
(IDENTITY_KEY, PARENT_IDENTITY_KEY, PARENT_IDENTITY_NAME, ENABLED, LOGIN_ENABLED, 
 END_DATE, IDENTITY_TYPE_KEY, IDENTITY_TYPE_NAME)
AS 
SELECT 
  a.IDENTITY_KEY 
, PARENT_IDENTITY_KEY 
, b.IDENTITY_NAME 
, b.ENABLED 
, b.LOGIN_ENABLED 
, b.END_DATE 
, c.IDENTITY_TYPE_KEY 
, c.IDENTITY_TYPE_NAME 
from T_IDENTITY_TO_IDENTITY a, T_IDENTITY b, T_IDENTITY_TYPE c 
where a.PARENT_IDENTITY_KEY=b.IDENTITY_KEY and b.IDENTITY_TYPE_KEY=c.IDENTITY_TYPE_KEY;


CREATE VIEW V_IDENTITY_TO_RIGHT
AS 
SELECT 
  B.IDENTITY_KEY 
, B.IDENTITY_NAME 
, C.RIGHT_KEY 
, C.RIGHT_NAME 
, A.RIGHT_VALUE 
, A.RIGHT_CONTEXT 
, A.LAST_MODIFIED 
FROM T_IDENTITY_TO_RIGHT A, T_IDENTITY B, T_RIGHT C 
WHERE A.IDENTITY_KEY = B.IDENTITY_KEY 
AND A.RIGHT_KEY = C.RIGHT_KEY;

CREATE OR REPLACE VIEW V_IDENTITY
(IDENTITY_NAME, IDENTITY_KEY, FIRST_NAME, LAST_NAME, EMAIL, 
 IDENTITY_TYPE_KEY, IDENTITY_TYPE_NAME, DESCRIPTION, PARENT_IDENTITY_KEY, PARENT_IDENTITY_NAME, 
 ENABLED, START_DATE, END_DATE, LAST_MODIFIED, OPERATOR_MODIFIED, 
 FULL_NAME, LOGIN_ENABLED, PHONE, EMAIL2,EXTERNAL_KEY,EXTERNAL_ID)
AS 
SELECT 
  a.identity_name 
, a.identity_key 
, a.first_name 
, a.last_name 
, a.email 
, a.IDENTITY_TYPE_KEY 
, c.IDENTITY_TYPE_NAME 
, a.DESCRIPTION 
, b.PARENT_IDENTITY_KEY 
, b.PARENT_IDENTITY_NAME 
, a.ENABLED 
, a.START_DATE 
, a.END_DATE 
, a.LAST_MODIFIED 
, a.OPERATOR_MODIFIED 
, a.LAST_NAME || ', ' || a.FIRST_NAME 
, a.LOGIN_ENABLED 
, a.PHONE 
, a.email2 
, a.EXTERNAL_KEY
, a.EXTERNAL_ID
 from t_identity a, v_identity_to_identity b, t_identity_type c 
where a.IDENTITY_KEY=b.IDENTITY_KEY and a.IDENTITY_TYPE_KEY=c.IDENTITY_TYPE_KEY;

commit ;